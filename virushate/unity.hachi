using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using System;
using System.Security.Cryptography;
using System.Text;
using UnityEngine.Networking;
using System.IO;

public class HachikoCyberSecurityGameAdvanced : MonoBehaviour
{
    // UI 要素
    public Text statusText;
    public Text scoreText;
    public Text levelText;
    public Button[] actionButtons;
    public GameObject gameOverPanel;
    public GameObject levelUpPanel;
    public InputField usernameInput;
    public InputField passwordInput;
    public GameObject loginPanel;
    public Text loginStatusText;

    // ゲーム状態変数
    private int securityLevel = 50;
    private int score = 0;
    private int playerLevel = 1;
    private int experiencePoints = 0;
    private bool isLoggedIn = false;
    private string sessionToken = "";
    private DateTime sessionExpiry;
    private string loggedInUser = "";
    private readonly int SESSION_TIMEOUT_MINUTES = 30;
    
    // ゲームデータ
    private List<string> threats = new List<string> { "ウイルス", "フィッシング", "マルウェア", "DDoS攻撃", "ランサムウェア", "ゼロデイ攻撃", "中間者攻撃" };
    private List<string> defenses = new List<string> { "アンチウイルス", "ファイアウォール", "暗号化", "バックアップ", "教育", "パッチ管理", "多要素認証" };
    private Dictionary<string, int> defenseLevels = new Dictionary<string, int>();
    
    // ログ記録用
    private List<string> securityLogs = new List<string>();
    private int maxLogEntries = 100;
    private string logFilePath;
    
    // 権限レベル (1: 一般ユーザー、2: 管理者)
    private int userPermissionLevel = 1;
    
    // Awake は Start より先に実行される
    void Awake()
    {
        // ログファイルのパス設定
        logFilePath = Path.Combine(Application.persistentDataPath, "security_logs.txt");
        
        // アプリケーション終了時にログをファイルに保存
        Application.quitting += SaveLogsToFile;
    }

    void Start()
    {
        // ログインパネルを表示、メインゲーム画面を非表示
        loginPanel.SetActive(true);
        gameOverPanel.SetActive(false);
        levelUpPanel.SetActive(false);
        
        // UI要素を初期化
        if (statusText != null) statusText.text = "ログインしてゲームを開始してください";
        
        // セキュリティログ初期エントリ
        LogSecurityEvent("アプリケーション起動");
    }

    // ログイン処理
    public void AttemptLogin()
    {
        // 入力値の取得と検証
        string username = usernameInput?.text ?? "";
        string password = passwordInput?.text ?? "";
        
        // 入力値のサニタイズ (XSS対策)
        username = SanitizeInput(username);
        
        // 入力検証
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            loginStatusText.text = "ユーザー名とパスワードを入力してください";
            LogSecurityEvent("ログイン失敗: 空の入力フィールド");
            return;
        }
        
        // パスワード長の検証 (最低8文字)
        if (password.Length < 8)
        {
            loginStatusText.text = "パスワードは最低8文字必要です";
            LogSecurityEvent("ログイン失敗: パスワード長不足");
            return;
        }
        
        // 実際の環境では、サーバーに対して認証を行う
        // ここではデモ用に簡易的な認証を実装
        bool authenticated = ValidateUser(username, password);
        
        if (authenticated)
        {
            // セッション作成
            CreateSession(username);
            
            // ログイン成功
            loginPanel.SetActive(false);
            loggedInUser = username;
            isLoggedIn = true;
            
            // ユーザー権限の設定 (デモ用)
            if (username.ToLower() == "admin")
            {
                userPermissionLevel = 2;
                LogSecurityEvent("管理者権限でログイン: " + username);
            }
            else
            {
                userPermissionLevel = 1;
                LogSecurityEvent("一般ユーザー権限でログイン: " + username);
            }
            
            // ゲーム初期化
            InitializeGame();
        }
        else
        {
            loginStatusText.text = "認証に失敗しました";
            LogSecurityEvent("ログイン失敗: 認証エラー, ユーザー: " + username);
            
            // ログイン試行回数制限なども実装可能
        }
        
        // パスワードフィールドをクリア (セキュリティ対策)
        passwordInput.text = "";
    }
    
    // セッション作成
    private void CreateSession(string username)
    {
        // セキュアなランダムトークン生成
        byte[] tokenData = new byte[32];
        using (var rng = new RNGCryptoServiceProvider())
        {
            rng.GetBytes(tokenData);
        }
        
        sessionToken = Convert.ToBase64String(tokenData);
        sessionExpiry = DateTime.Now.AddMinutes(SESSION_TIMEOUT_MINUTES);
        
        LogSecurityEvent("新規セッション作成: " + username);
    }
    
    // セッション検証
    private bool ValidateSession()
    {
        if (string.IsNullOrEmpty(sessionToken) || DateTime.Now > sessionExpiry)
        {
            LogSecurityEvent("セッションタイムアウトまたは無効: " + loggedInUser);
            LogoutUser();
            return false;
        }
        
        // セッション延長
        sessionExpiry = DateTime.Now.AddMinutes(SESSION_TIMEOUT_MINUTES);
        return true;
    }
    
    // ログアウト処理
    public void LogoutUser()
    {
        LogSecurityEvent("ユーザーログアウト: " + loggedInUser);
        isLoggedIn = false;
        sessionToken = "";
        loggedInUser = "";
        userPermissionLevel = 0;
        loginPanel.SetActive(true);
        CancelInvoke("GenerateThreat");
    }
    
    // ユーザー認証（デモ用）
    private bool ValidateUser(string username, string password)
    {
        // 実際のアプリケーションでは、ハッシュ化されたパスワードをサーバーで検証する
        // このデモでは簡易的に実装
        string hashedPassword = HashPassword(password);
        
        // デモ用アカウント (実際には使用しないでください)
        Dictionary<string, string> demoAccounts = new Dictionary<string, string>
        {
            { "admin", HashPassword("adminPass123!") },
            { "user", HashPassword("userPass456!") },
            { "test", HashPassword("testPass789!") }
        };
        
        // アカウント存在確認とパスワード検証
        return demoAccounts.ContainsKey(username) && demoAccounts[username] == hashedPassword;
    }
    
    // パスワードハッシュ化 (SHA-256)
    private string HashPassword(string password)
    {
        // 実際の実装では、ソルトを追加して安全性を高めるべき
        using (SHA256 sha256 = SHA256.Create())
        {
            byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
    
    // 入力サニタイズ (XSS対策)
    private string SanitizeInput(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        
        // HTML特殊文字をエスケープ
        return input
            .Replace("&", "&amp;")
            .Replace("<", "&lt;")
            .Replace(">", "&gt;")
            .Replace("\"", "&quot;")
            .Replace("'", "&#39;");
    }
    
    // セキュリティイベントログ記録
    private void LogSecurityEvent(string eventDescription)
    {
        string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        string logEntry = $"[{timestamp}] {eventDescription}";
        
        // ログリストに追加
        securityLogs.Add(logEntry);
        
        // 最大エントリ数を超えたら古いログを削除
        if (securityLogs.Count > maxLogEntries)
        {
            securityLogs.RemoveAt(0);
        }
        
        // 重要なセキュリティイベントはファイルにも即時保存可能
        if (eventDescription.Contains("失敗") || eventDescription.Contains("攻撃") || 
            eventDescription.Contains("管理者") || eventDescription.Contains("エラー"))
        {
            AppendLogToFile(logEntry);
        }
        
        Debug.Log("セキュリティログ: " + logEntry);
    }
    
    // ログをファイルに追加
    private void AppendLogToFile(string logEntry)
    {
        try
        {
            using (StreamWriter writer = new StreamWriter(logFilePath, true))
            {
                writer.WriteLine(logEntry);
            }
        }
        catch (Exception e)
        {
            Debug.LogError("ログファイル書き込みエラー: " + e.Message);
        }
    }
    
    // 全ログをファイルに保存
    private void SaveLogsToFile()
    {
        try
        {
            using (StreamWriter writer = new StreamWriter(logFilePath, true))
            {
                writer.WriteLine("[" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "] アプリケーション終了 - ログ保存");
                foreach (string log in securityLogs)
                {
                    writer.WriteLine(log);
                }
            }
        }
        catch (Exception e)
        {
            Debug.LogError("ログ保存エラー: " + e.Message);
        }
    }

    void InitializeGame()
    {
        // セッション検証
        if (!ValidateSession())
        {
            return;
        }
        
        // ゲーム変数リセット
        foreach (string defense in defenses)
        {
            defenseLevels[defense] = 1;
        }
        
        // UI更新
        UpdateUI();
        
        // ボタンリスナー設定
        for (int i = 0; i < actionButtons.Length; i++)
        {
            int index = i;
            // 既存のリスナーをクリア
            actionButtons[i].onClick.RemoveAllListeners();
            // 新しいリスナーを追加
            actionButtons[i].onClick.AddListener(() => OnDefenseAction(index));
            UpdateButtonText(i);
        }
        
        // 定期的な脅威生成を開始
        CancelInvoke("GenerateThreat");
        InvokeRepeating("GenerateThreat", 2f, 5f);
        
        // ゲーム開始ログ
        statusText.text = "ゲーム開始：ハチ公のデータを守れ！";
        LogSecurityEvent("ゲーム開始: プレイヤー " + loggedInUser);
    }

    void GenerateThreat()
    {
        // セッション検証
        if (!ValidateSession() || securityLevel <= 0) return;
        
        // 脅威選択とダメージ計算
        string threat = threats[UnityEngine.Random.Range(0, threats.Count)];
        int damage = UnityEngine.Random.Range(5, 15) + (playerLevel - 1) * 2;
        
        // 暗号化デモ用の脅威データ
        string encryptedThreatData = EncryptData(threat + ":" + damage.ToString());
        
        // 復号化して脅威を処理
        string[] decryptedData = DecryptData(encryptedThreatData).Split(':');
        if (decryptedData.Length == 2)
        {
            threat = decryptedData[0];
            if (int.TryParse(decryptedData[1], out damage))
            {
                // セキュリティレベル減少
                securityLevel -= damage;
                securityLevel = Mathf.Max(0, securityLevel);  // 負の値にならないよう制限
                
                // UI更新
                statusText.text = $"脅威検出: {threat}がハチ公のデータを攻撃中！\nセキュリティレベル: {damage}ポイント減少";
                UpdateUI();
                
                // ログ記録
                LogSecurityEvent($"脅威検出: {threat}, ダメージ量: {damage}, 残セキュリティ: {securityLevel}%");
                
                // ゲームオーバー確認
                CheckGameOver();
            }
        }
    }

    void OnDefenseAction(int defenseIndex)
    {
        // セッション検証
        if (!ValidateSession() || securityLevel <= 0) return;
        
        // インデックスの境界チェック
        if (defenseIndex < 0 || defenseIndex >= defenses.Count)
        {
            LogSecurityEvent("不正な防御アクションインデックス: " + defenseIndex);
            return;
        }
        
        string defense = defenses[defenseIndex];
        int defenseLevel = defenseLevels[defense];
        
        // 特定の防御アクションに権限チェック（例: 「多要素認証」は管理者のみ）
        if (defense == "多要素認証" && userPermissionLevel < 2)
        {
            statusText.text = "権限エラー: 多要素認証の設定には管理者権限が必要です";
            LogSecurityEvent("権限エラー: 多要素認証アクセス拒否, ユーザー: " + loggedInUser);
            return;
        }
        
        // 防御効果の計算
        int protection = UnityEngine.Random.Range(5, 15) + (defenseLevel - 1) * 2;
        
        // セキュリティレベル増加（最大100%）
        securityLevel = Mathf.Min(securityLevel + protection, 100);
        
        // スコアと経験値を加算
        score += 10 * playerLevel;
        experiencePoints += 5;
        
        // UI更新
        statusText.text = $"{defense} (Lv.{defenseLevel})を実施: セキュリティレベルが{protection}ポイント上昇";
        UpdateUI();
        
        // ログ記録
        LogSecurityEvent($"防御アクション: {defense} (Lv.{defenseLevel}), 効果: +{protection}%, 現セキュリティ: {securityLevel}%");
        
        // レベルアップ確認
        CheckLevelUp();
    }

    void UpdateUI()
    {
        // UI要素の存在確認
        if (scoreText != null && levelText != null)
        {
            scoreText.text = $"スコア: {score}\nセキュリティレベル: {securityLevel}%";
            levelText.text = $"プレイヤーレベル: {playerLevel}\n経験値: {experiencePoints}/100";
        }
    }

    void UpdateButtonText(int index)
    {
        // インデックスの境界チェック
        if (index < 0 || index >= actionButtons.Length || index >= defenses.Count)
        {
            return;
        }
        
        string defense = defenses[index];
        int level = defenseLevels[defense];
        
        // UI要素の存在確認
        Text buttonText = actionButtons[index]?.GetComponentInChildren<Text>();
        if (buttonText != null)
        {
            buttonText.text = $"{defense} (Lv.{level})";
        }
    }

    void CheckGameOver()
    {
        if (securityLevel <= 0)
        {
            statusText.text = "ゲームオーバー：ハチ公のデータが完全に侵害されました。";
            gameOverPanel.SetActive(true);
            CancelInvoke("GenerateThreat");
            
            // ゲームオーバーログ
            LogSecurityEvent("ゲームオーバー: プレイヤー " + loggedInUser + ", 最終スコア: " + score);
        }
    }

    void CheckLevelUp()
    {
        if (experiencePoints >= 100)
        {
            playerLevel++;
            experiencePoints -= 100;
            levelUpPanel.SetActive(true);
            statusText.text = $"レベルアップ！プレイヤーレベルが{playerLevel}になりました。";
            
            // レベルアップログ
            LogSecurityEvent("レベルアップ: プレイヤー " + loggedInUser + ", 新レベル: " + playerLevel);
        }
    }

    public void UpgradeDefense(int defenseIndex)
    {
        // セッション検証
        if (!ValidateSession()) return;
        
        // インデックスの境界チェック
        if (defenseIndex < 0 || defenseIndex >= defenses.Count)
        {
            LogSecurityEvent("不正な防御アップグレードインデックス: " + defenseIndex);
            return;
        }
        
        string defense = defenses[defenseIndex];
        defenseLevels[defense]++;
        UpdateButtonText(defenseIndex);
        levelUpPanel.SetActive(false);
        
        // アップグレードログ
        LogSecurityEvent($"防御アップグレード: {defense}, 新レベル: {defenseLevels[defense]}");
    }

    public void RestartGame()
    {
        // セッション検証
        if (!ValidateSession()) return;
        
        // ゲーム変数リセット
        securityLevel = 50;
        score = 0;
        playerLevel = 1;
        experiencePoints = 0;
        
        foreach (string defense in defenses)
        {
            defenseLevels[defense] = 1;
        }
        
        // UI更新
        statusText.text = "ゲーム再開：ハチ公のデータを守れ！";
        gameOverPanel.SetActive(false);
        levelUpPanel.SetActive(false);
        UpdateUI();
        
        // ボタンテキスト更新
        for (int i = 0; i < actionButtons.Length; i++)
        {
            UpdateButtonText(i);
        }
        
        // 脅威生成再開
        CancelInvoke("GenerateThreat");
        InvokeRepeating("GenerateThreat", 2f, 5f);
        
        // 再開ログ
        LogSecurityEvent("ゲーム再開: プレイヤー " + loggedInUser);
    }
    
    // データ暗号化 (AES)
    private string EncryptData(string data)
    {
        try
        {
            // 実際の実装では、キーとIVは安全に管理する必要がある
            byte[] key = Encoding.UTF8.GetBytes("HachikoSecureKey123456789012345678");
            byte[] iv = Encoding.UTF8.GetBytes("HachikoSecureIV12");
            
            using (Aes aes = Aes.Create())
            {
                aes.Key = key;
                aes.IV = iv;
                
                ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);
                
                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter sw = new StreamWriter(cs))
                        {
                            sw.Write(data);
                        }
                        return Convert.ToBase64String(ms.ToArray());
                    }
                }
            }
        }
        catch (Exception e)
        {
            LogSecurityEvent("暗号化エラー: " + e.Message);
            return data;  // エラー時は元のデータを返す
        }
    }
    
    // データ復号化
    private string DecryptData(string encryptedData)
    {
        try
        {
            // 暗号化と同じキーとIVを使用
            byte[] key = Encoding.UTF8.GetBytes("HachikoSecureKey123456789012345678");
            byte[] iv = Encoding.UTF8.GetBytes("HachikoSecureIV12");
            
            byte[] cipherText = Convert.FromBase64String(encryptedData);
            
            using (Aes aes = Aes.Create())
            {
                aes.Key = key;
                aes.IV = iv;
                
                ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
                
                using (MemoryStream ms = new MemoryStream(cipherText))
                {
                    using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader sr = new StreamReader(cs))
                        {
                            return sr.ReadToEnd();
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            LogSecurityEvent("復号化エラー: " + e.Message);
            return "";  // エラー時は空文字を返す
        }
    }
    
    // アプリケーション終了時の処理
    void OnApplicationQuit()
    {
        LogSecurityEvent("アプリケーション終了");
        SaveLogsToFile();
    }
    
    // ログ表示機能（管理者用）
    public void ShowSecurityLogs()
    {
        // 権限チェック
        if (userPermissionLevel < 2)
        {
            statusText.text = "権限エラー: セキュリティログの閲覧には管理者権限が必要です";
            LogSecurityEvent("権限エラー: ログ閲覧アクセス拒否, ユーザー: " + loggedInUser);
            return;
        }
        
        // ここで管理者用のログ表示パネルを表示する
        // （実装例は省略）
        
        LogSecurityEvent("セキュリティログ閲覧: 管理者 " + loggedInUser);
    }
    
    // プレイヤーデータのエクスポート (管理者用)
    public void ExportPlayerData()
    {
        // 権限チェック
        if (userPermissionLevel < 2)
        {
            statusText.text = "権限エラー: データエクスポートには管理者権限が必要です";
            LogSecurityEvent("権限エラー: データエクスポートアクセス拒否, ユーザー: " + loggedInUser);
            return;
        }
        
        // プレイヤーデータをJSONにシリアライズ
        string playerData = JsonUtility.ToJson(new PlayerData
        {
            playerName = loggedInUser,
            score = score,
            level = playerLevel,
            securityLevel = securityLevel,
            experiencePoints = experiencePoints
        }, true);
        
        // データ暗号化
        string encryptedData = EncryptData(playerData);
        
        // ファイルに保存
        string filePath = Path.Combine(Application.persistentDataPath, "player_data_" + loggedInUser + ".dat");
        try
        {
            File.WriteAllText(filePath, encryptedData);
            statusText.text = "プレイヤーデータをエクスポートしました: " + filePath;
            LogSecurityEvent("プレイヤーデータエクスポート: 管理者 " + loggedInUser);
        }
        catch (Exception e)
        {
            statusText.text = "データエクスポートエラー: " + e.Message;
            LogSecurityEvent("データエクスポートエラー: " + e.Message);
        }
    }
    
    // プレイヤーデータ構造体
    [Serializable]
    private struct PlayerData
    {
        public string playerName;
        public int score;
        public int level;
        public int securityLevel;
        public int experiencePoints;
    }
}
