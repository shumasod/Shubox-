##  CloudFrontのディストリビューションを作成する
resource "aws_cloudfront_distribution" "my-distribution" { //distributionの部分は例となる
  origin {
    domain_name = "${aws_s3_bucket.my-bucket.bucket_domain_name}"//取得するLPページ
    origin_id = "my-origin"
  }

  default_cache_behavior {
    allowed_methods = ["GET", "HEAD"]
    cached_methods = ["GET", "HEAD"]
    target_origin_id = "my-origin"
    viewer_protocol_policy = "redirect-to-https"
    min_ttl = 0
    default_ttl = 300
    max_ttl = 3600
  }

  custom_error_pages {
    error_code = 404
    response_page_path = "/404.html"
  }
}

# S3バケットを作成する
resource "aws_s3_bucket" "my-bucket" {
  bucket = "my-bucket"
  acl = "public-read"
}

# ランディングページのファイルをS3バケットにアップロードする
resource "aws_s3_object" "index-html" {
  bucket = "${aws_s3_bucket.my-bucket.bucket}"
  key = "index.html"
  content = "Hello, world!"
}

# ランディングページのキャッシュを自動的に削除するCloudWatchイベントルールを作成・登録する
resource "aws_cloudwatch_event_rule" "my-rule" {
  name = "my-rule"
  description = "ランディングページのキャッシュを自動的に削除する"
  event_pattern = {
    source = ["aws.s3"]
    resources = ["${aws_s3_bucket.my-bucket.arn}/*"]
    action = ["s3:ObjectCreated:*", "s3:ObjectUpdated:*"]
  }
}

# CloudWatchイベントルールにトリガーされるLambda関数を作成・登録する
resource "aws_lambda_function" "my-function" {
  function_name = "my-function"
  runtime = "python3.8"
  handler = "index.handler"
  code = <<EOF
def handler(event, context):
  # CloudFrontのディストリビューションのキャッシュを削除する
  client = boto3.client("cloudfront")
  client.create_invalidation(
    distribution_id = "${aws_cloudfront_distribution.my-distribution.id}",
    path_pattern = "*",
  )
EOF
}

# CloudWatchイベントルールとLambda関数を関連付ける
resource "aws_cloudwatch_event_target" "my-target" {
  rule = "${aws_cloudwatch_event_rule.my-rule.name}"
  target_id = "my-target"
  target_arn = "${aws_lambda_function.my-function.arn}"
}
