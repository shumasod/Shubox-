AWSTemplateFormatVersion: ''
Description: S3 static website with CloudFront and automatic cache invalidation

Resources:
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-my-bucket-${AWS::AccountId}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${n}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub '

  IndexHtml:
    Type: AWS::S3::Object
    Properties:
      Bucket: !Ref MyBucket
      Key: index.html
      ContentType: text/html
      Source: 
        Fn::Sub: 
          - |
            <html>
            <body>
              <h1>Hello, world!</h1>
              <p>This is a sample page hosted on S3 and served through CloudFront.</p>
              <p>Stack ID: ${StackId}</p>
            </body>
            </html>
          - { StackId: !Ref 'AWS::StackId' }

  ErrorHtml:
    Type: AWS::S3::Object
    Properties:
      Bucket: !Ref MyBucket
      Key: error.html
      ContentType: text/html
      Source: |
        <html>
        <body>
          <h1>404 - Page Not Found</h1>
          <p>The requested page could not be found.</p>
        </body>
        </html>

  MyDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 300
          ForwardedValues:
            QueryString: false
          MaxTTL: 1200
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt MyBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig: {}
        PriceClass: PriceClass_100

  MyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-s3-event-rule'
      Description: "Rule to trigger Lambda when objects are created or updated in S3"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'Object Created'
          - 'Object Updated'
        detail:
          bucket:
            name:
              - !Ref MyBucket

  MyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-cache-invalidator'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import time
          
          def handler(event, context):
              distribution_id = os.environ['DISTRIBUTION_ID']
              client = boto3.client('cloudfront')
              
              response = client.create_invalidation(
                  DistributionId=distribution_id,
                  InvalidationBatch={
                      'Paths': {
                          'Quantity': 1,
                          'Items': ['/*']
                      },
                      'CallerReference': str(time.time())
                  }
              )
              
              print(f"Invalidation created: {response['Invalidation']['Id']}")
              return response
      Environment:
        Variables:
          DISTRIBUTION_ID: !Ref MyDistribution

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudfront:CreateInvalidation'
                Resource: '*'

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt MyEventRule.Arn

  MyEventTarget:
    Type: AWS::Events::Rule
    Properties:
      Description: "CloudWatch Events Rule to trigger Lambda function"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref MyBucket
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt MyFunction.Arn
          Id: "S3ToLambda"

Outputs:
  WebsiteURL:
    Value: !GetAtt MyDistribution.DomainName
    Description: CloudFront Distribution Domain Name
  S3BucketName:
    Value: !Ref MyBucket
    Description: Name of the S3 bucket
