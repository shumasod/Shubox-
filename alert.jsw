import React, { useState, useEffect, useRef } from ‘react’;
import { Play, Pause, RotateCcw, Users, Clock, Timer } from ‘lucide-react’;

export default function MTGTimer() {
const [roundTime, setRoundTime] = useState(50 * 60); // 50分
const [player1Time, setPlayer1Time] = useState(25 * 60); // 25分
const [player2Time, setPlayer2Time] = useState(25 * 60); // 25分
const [activePlayer, setActivePlayer] = useState(1);
const [isRunning, setIsRunning] = useState(false);
const [mode, setMode] = useState(‘round’); // ‘round’ or ‘player’

const intervalRef = useRef(null);
const audioRef = useRef(null);

useEffect(() => {
if (isRunning) {
intervalRef.current = setInterval(() => {
if (mode === ‘round’) {
setRoundTime(prev => {
if (prev <= 1) {
setIsRunning(false);
playSound();
return 0;
}
return prev - 1;
});
} else {
if (activePlayer === 1) {
setPlayer1Time(prev => {
if (prev <= 1) {
setIsRunning(false);
playSound();
return 0;
}
return prev - 1;
});
} else {
setPlayer2Time(prev => {
if (prev <= 1) {
setIsRunning(false);
playSound();
return 0;
}
return prev - 1;
});
}
}
}, 1000);
} else {
clearInterval(intervalRef.current);
}

```
return () => clearInterval(intervalRef.current);
```

}, [isRunning, mode, activePlayer]);

const playSound = () => {
// ビープ音を再生（Web Audio API使用）
const audioContext = new (window.AudioContext || window.webkitAudioContext)();
const oscillator = audioContext.createOscillator();
const gainNode = audioContext.createGain();

```
oscillator.connect(gainNode);
gainNode.connect(audioContext.destination);

oscillator.frequency.value = 800;
oscillator.type = 'sine';
gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1);

oscillator.start();
oscillator.stop(audioContext.currentTime + 1);
```

};

const formatTime = (seconds) => {
const mins = Math.floor(seconds / 60);
const secs = seconds % 60;
return `${mins}:${secs.toString().padStart(2, '0')}`;
};

const toggleTimer = () => {
setIsRunning(!isRunning);
};

const resetTimer = () => {
setIsRunning(false);
setRoundTime(50 * 60);
setPlayer1Time(25 * 60);
setPlayer2Time(25 * 60);
setActivePlayer(1);
};

const switchPlayer = () => {
if (mode === ‘player’) {
setActivePlayer(activePlayer === 1 ? 2 : 1);
}
};

const setCustomTime = (type, minutes) => {
const seconds = minutes * 60;
if (type === ‘round’) {
setRoundTime(seconds);
} else if (type === ‘player1’) {
setPlayer1Time(seconds);
} else if (type === ‘player2’) {
setPlayer2Time(seconds);
}
};

const getTimeColor = (time, isActive = false) => {
if (time <= 60) return ‘text-red-500’; // 1分以下
if (time <= 300) return ‘text-yellow-500’; // 5分以下
if (isActive) return ‘text-blue-500’;
return ‘text-gray-700’;
};

return (
<div className="max-w-4xl mx-auto p-6 bg-gradient-to-br from-blue-50 to-purple-50 min-h-screen">
<div className="bg-white rounded-lg shadow-lg p-6">
<div className="text-center mb-6">
<h1 className="text-3xl font-bold text-gray-800 mb-2">MTG タイマー</h1>
<div className="flex justify-center gap-4 mb-4">
<button
onClick={() => setMode(‘round’)}
className={`px-4 py-2 rounded-lg font-medium transition-colors ${ mode === 'round'  ? 'bg-blue-500 text-white'  : 'bg-gray-200 text-gray-700 hover:bg-gray-300' }`}
>
<Clock className="inline w-4 h-4 mr-2" />
ラウンドタイマー
</button>
<button
onClick={() => setMode(‘player’)}
className={`px-4 py-2 rounded-lg font-medium transition-colors ${ mode === 'player'  ? 'bg-blue-500 text-white'  : 'bg-gray-200 text-gray-700 hover:bg-gray-300' }`}
>
<Users className="inline w-4 h-4 mr-2" />
プレイヤータイマー
</button>
</div>
</div>

```
    {mode === 'round' ? (
      <div className="text-center mb-8">
        <div className="mb-4">
          <div className={`text-6xl font-mono font-bold mb-2 ${getTimeColor(roundTime)}`}>
            {formatTime(roundTime)}
          </div>
          <div className="text-lg text-gray-600">ラウンド時間</div>
        </div>
        <div className="flex justify-center gap-2 mb-4">
          <button
            onClick={() => setCustomTime('round', 30)}
            className="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-sm"
          >
            30分
          </button>
          <button
            onClick={() => setCustomTime('round', 45)}
            className="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-sm"
          >
            45分
          </button>
          <button
            onClick={() => setCustomTime('round', 50)}
            className="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-sm"
          >
            50分
          </button>
          <button
            onClick={() => setCustomTime('round', 60)}
            className="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-sm"
          >
            60分
          </button>
        </div>
      </div>
    ) : (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div className={`text-center p-6 rounded-lg border-2 transition-all ${
          activePlayer === 1 
            ? 'border-blue-500 bg-blue-50' 
            : 'border-gray-200 bg-gray-50'
        }`}>
          <div className="text-xl font-bold text-gray-800 mb-2">プレイヤー 1</div>
          <div className={`text-4xl font-mono font-bold mb-2 ${getTimeColor(player1Time, activePlayer === 1)}`}>
            {formatTime(player1Time)}
          </div>
          <div className="flex justify-center gap-2">
            <button
              onClick={() => setCustomTime('player1', 20)}
              className="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-xs"
            >
              20分
            </button>
            <button
              onClick={() => setCustomTime('player1', 25)}
              className="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-xs"
            >
              25分
            </button>
            <button
              onClick={() => setCustomTime('player1', 30)}
              className="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-xs"
            >
              30分
            </button>
          </div>
        </div>
        
        <div className={`text-center p-6 rounded-lg border-2 transition-all ${
          activePlayer === 2 
            ? 'border-blue-500 bg-blue-50' 
            : 'border-gray-200 bg-gray-50'
        }`}>
          <div className="text-xl font-bold text-gray-800 mb-2">プレイヤー 2</div>
          <div className={`text-4xl font-mono font-bold mb-2 ${getTimeColor(player2Time, activePlayer === 2)}`}>
            {formatTime(player2Time)}
          </div>
          <div className="flex justify-center gap-2">
            <button
              onClick={() => setCustomTime('player2', 20)}
              className="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-xs"
            >
              20分
            </button>
            <button
              onClick={() => setCustomTime('player2', 25)}
              className="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-xs"
            >
              25分
            </button>
            <button
              onClick={() => setCustomTime('player2', 30)}
              className="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-xs"
            >
              30分
            </button>
          </div>
        </div>
      </div>
    )}

    <div className="flex justify-center gap-4">
      <button
        onClick={toggleTimer}
        className={`px-6 py-3 rounded-lg font-medium flex items-center gap-2 transition-colors ${
          isRunning
            ? 'bg-red-500 text-white hover:bg-red-600'
            : 'bg-green-500 text-white hover:bg-green-600'
        }`}
      >
        {isRunning ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
        {isRunning ? '一時停止' : '開始'}
      </button>
      
      <button
        onClick={resetTimer}
        className="px-6 py-3 bg-gray-500 text-white rounded-lg font-medium hover:bg-gray-600 flex items-center gap-2 transition-colors"
      >
        <RotateCcw className="w-5 h-5" />
        リセット
      </button>
      
      {mode === 'player' && (
        <button
          onClick={switchPlayer}
          className="px-6 py-3 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 flex items-center gap-2 transition-colors"
        >
          <Timer className="w-5 h-5" />
          プレイヤー切替
        </button>
      )}
    </div>
    
    <div className="mt-6 text-center text-sm text-gray-600">
      <p>時間が残り少なくなると色が変わります</p>
      <p className="mt-1">
        <span className="text-yellow-500">■</span> 5分以下　
        <span className="text-red-500">■</span> 1分以下
      </p>
    </div>
  </div>
</div>
```

);
}